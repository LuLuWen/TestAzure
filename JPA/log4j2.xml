<?xml version="1.0" encoding="UTF-8"?>
<!--日誌級別以及優先級排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!-- Configuration後面的status,這個用於設置log4j2自身內部的信息輸出,可以不設置,當設置成trace時,你會看到log4j2內部各種詳細輸出-->
<!--monitorInterval：Log4j能夠自動檢測修改配置文件和重新配置本身,設置間隔秒數-->
<configuration status="WARN" monitorInterval="1800">

    <Properties>
        <!-- ================ ==============================公共配置================== ============================ -->
        <!--設置日誌文件的目錄名稱-->
        <property name="logFileName ">IotEmLog</property>

        <!--日誌默認存放的位置,可以設置為項目根路徑下,也可指定絕對路徑-->
        <!--存放路徑一:通用路徑,window平台-->
        <property name="basePath">D:/project/logs/${logFileName}</property>
        <!--存放路徑二:web工程專用,java項目沒有這個變量,需要刪掉,否則會報異常,這裡把日誌放在web項目的根目錄下-->
        <!-- <property name=" basePath">${web:rootDir}/${logFileName}</property> -->
        <!--存放路徑三:web工程專用,java項目沒有這個變量,需要刪掉,否則會報異常,這裡把日誌放在tocmat的logs目錄下-->
        <!--<property name="basePath">${sys:catalina.home}/logs/${logFileName}</property>-->


        <!--控制台默認輸出格式,"%-5level":日誌級別,"%l":輸出完整的錯誤位置,是小寫的L,因為有行號顯示,所以影響日誌輸出的性能-->
        <property name=" console_log_pattern">[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level]: %l - %m%n</property>
        <!--日誌文件默認輸出格式,不帶行號輸出(行號顯示會影響日誌輸出性能);%C:大寫,類名;%M:方法名;%m:錯誤信息;%n:換行-->
        <!-- <property name="log_pattern">%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] %C.%M - %m%n</property> -->
        <!--日誌文件默認輸出格式,另類帶行號輸出(對日誌輸出性能未知);%C:大寫,類名;%M:方法名;%L:行號;%m:錯誤信息;% n:換行-->
        <property name="log_pattern">[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level]: %C.%M[%L line] - % m%n</property>

        <!--日誌默認切割的最小單位-->
        <property name="every_file_size">20MB</property>
        <!--日誌默認輸出級別-->
        <property name="output_log_level ">DEBUG</property>

        <!-- ======================================= ====所有級別日誌配置========================================== = -->
        <!--日誌默認存放路徑(所有級別日誌) -->
        <property name="rolling_fileName">${basePath}/all.log</property>
        <!--日誌默認壓縮路徑,將超過指定文件大小的日誌,自動存入按"年月"建立的文件夾下面並進行壓縮,作為存檔-->
        <property name="rolling_filePattern">${basePath}/%d{yyyy-MM}/all-%d{yyyy-MM-dd-HH}-%i.log.gz</property>
        <!--日誌默認同類型日誌,同一文件夾下可以存放的數量,不設置此屬性則默認為7個,filePattern最後要帶%i才會生效-->
        <property name="rolling_max">500</property>
        <!--日誌默認同類型日誌,多久生成一個新的日誌文件,這個配置需要和filePattern結合使用;
                如果設置為1,filePattern是%d{yyyy-MM-dd}到天的格式,則間隔一天生成一個文件
                如果設置為12,filePattern是%d{yyyy-MM-dd-HH}到小時的格式,則間隔12小時生成一個文件-->
        <property name="rolling_timeInterval">12</property>
        <!--日誌默認同類型日誌,是否對封存時間進行調製,若為true,則封存時間將以0點為邊界進行調整,
                如:現在是早上3am,interval是4,那麼第一次滾動是在4am ,接著是8am,12am...而不是7am -->
        <property name="rolling_timeModulate">true</property>

        <!-- ============================================Info級別日誌============================================ -->
        <!-- Info日誌默認存放路徑(Info級別日誌) -->
        <property name="info_fileName">${basePath}/info.log</property>
        <!-- Info日誌默認壓縮路徑,將超過指定文件大小的日誌,自動存入按"年月"建立的文件夾下面並進行壓縮,作為存檔-->
        <property name="info_filePattern">${basePath}/%d{yyyy-MM}/info-%d {yyyy-MM-dd}-%i.log.gz</property>
        <!-- Info日誌默認同一文件夾下可以存放的數量,不設置此屬性則默認為7個-->
        <property name= "info_max">100</property>
        <!--日誌默認同類型日誌,多久生成一個新的日誌文件,這個配置需要和filePattern結合使用;
                如果設置為1,filePattern是%d{yyyy-MM-dd }到天的格式,則間隔一天生成一個文件
                如果設置為12,filePattern是%d{yyyy-MM-dd-HH}到小時的格式,則間隔12小時生成一個文件-->
        <property name="info_timeInterval">1</property>
        <!--日誌默認同類型日誌,是否對封存時間進行調製,若為true,則封存時間將以0點為邊界進行調整,
                如:現在是早上3am,interval是4,那麼第一次滾動是在4am,接著是8am,12am...而不是7am -->
        <property name="info_timeModulate">true</property>

        <!-- === =========================================Warn級別日誌====== ====================================== -->
        <!-- Warn日誌默認存放路徑(Warn級別日誌) -->
        <property name="warn_fileName">${basePath}/warn.log</property>
        <!-- Warn日誌默認壓縮路徑,將超過指定文件大小的日誌,自動存入按"年月"建立的文件夾下面並進行壓縮,作為存檔-->
        <property name="warn_filePattern">${basePath}/%d{yyyy-MM}/warn-%d{yyyy-MM-dd} -%i.log.gz</property>
        <!-- Warn日誌默認同一文件夾下可以存放的數量,不設置此屬性則默認為7個-->
        <property name="warn_max">100</property>
        <!--日誌默認同類型日誌,多久生成一個新的日誌文件,這個配置需要和filePattern結合使用;
                如果設置為1,filePattern是%d{yyyy -MM-dd}到天的格式,則間隔一天生成一個文件
                如果設置為12,filePattern是%d{yyyy-MM-dd-HH}到小時的格式,則間隔12小時生成一個文件-->
        <property name="warn_timeInterval">1</property>
        <!--日誌默認同類型日誌,是否對封存時間進行調製,若為true,則封存時間將以0點為邊界進行調整,
                如:現在是早上3am,interval是4,那麼第一次滾動是在4am,接著是8am,12am...而不是7am -->
        <property name="warn_timeModulate">true</property>

        <!-- ==== ========================================Error級別日誌======= ===================================== -->
        <!-- Error日誌默認存放路徑( Error級別日誌) -->
        <property name="error_fileName">${basePath}/error.log</property>
        <!-- Error日誌默認壓縮路徑,將超過指定文件大小的日誌,自動存入按"年月"建立的文件夾下面並進行壓縮,作為存檔-->
        <property name="error_filePattern">${basePath}/%d{yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log.gz</property>
        <!-- Error日誌默認同一文件夾下可以存放的數量,不設置此屬性則默認為7個-->
        <property name="error_max">100</property>
        <!--日誌默認同類型日誌,多久生成一個新的日誌文件,這個配置需要和filePattern結合使用;
                如果設置為1,filePattern是%d{yyyy-MM-dd}到天的格式,則間隔一天生成一個文件
                如果設置為12,filePattern是%d{yyyy-MM-dd-HH}到小時的格式,則間隔12小時生成一個文件-->
        <property name="error_timeInterval">1</property>
        <!-- 日誌默認同類型日誌,是否對封存時間進行調製,若為true,則封存時間將以0點為邊界進行調整,
                如:現在是早上3am,interval是4,那麼第一次滾動是在4am,接著是8am,12am...而不是7am -->
        <property name="error_timeModulate">true</property>

        <!-- ============================================控制台顯示控制= =========================================== -->
        <!--控制台顯示的日誌最低級別-->
        <property name="console_print_level">INFO</property>

    </Properties>

    <!--定義appender -->
    <appenders>
        <!-- ======= ================================用來定義輸出到控制台的配置========= ============================== -->
        <Console name="Console" target="SYSTEM_OUT">
            <!--設置控制台只輸出level及以上級別的信息(onMatch),其他的直接拒絕(onMismatch)-->
            <ThresholdFilter level="${console_print_level}" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--設置輸出格式,不設置默認為:%m%n -->
            <PatternLayout pattern="${console_log_pattern }"/>
        </Console>

        <!-- ================================打印root中指定的level級別以上的日誌到文件================================ -->
        <RollingFile name="RollingFile" fileName= "${rolling_fileName}" filePattern="${rolling_filePattern}">
            <PatternLayout pattern="${log_pattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="${rolling_timeInterval}" modulate="${warn_timeModulate}"/>
                <SizeBasedTriggeringPolicy size="${every_file_size}"/>
            </Policies>
            <!--設置同類型日誌,同一文件夾下可以存放的數量,如果不設置此屬性則默認存放7個文件-->
            <DefaultRolloverStrategy max="${rolling_max}" />
        </RollingFile>

        <!-- =======================================打印INFO級別的日誌到文件======================================= -->
        <RollingFile name="InfoFile " fileName="${info_fileName}" filePattern="${info_filePattern}">
            <PatternLayout pattern="${log_pattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="${info_timeInterval}" modulate="${info_timeModulate} "/>
                <SizeBasedTriggeringPolicy size="${every_file_size}"/>
            </Policies>
            <DefaultRolloverStrategy max="${info_max}" />
            <Filters>
                <ThresholdFilter level="WARN" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY "/>
            </Filters>
        </RollingFile>

        <!-- =================================== ====打印WARN級別的日誌到文件======================================= -->
        <RollingFile name="WarnFile" fileName="${warn_fileName}" filePattern="${warn_filePattern}">
            <PatternLayout pattern="${log_pattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="${warn_timeInterval}" modulate="${warn_timeModulate}"/>
                <SizeBasedTriggeringPolicy size="${every_file_size}"/>
            </Policies>
            <DefaultRolloverStrategy max="${warn_max}" />
            <Filters>
                <ThresholdFilter level="ERROR" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="WARN" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
        </RollingFile>

        <!-- =================== ====================打印ERROR級別的日誌到文件======================= ================ -->
        <RollingFile name="ErrorFile" fileName="${error_fileName}" filePattern="${error_filePattern}">
            <PatternLayout pattern="${log_pattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="${error_timeInterval}" modulate="${error_timeModulate}"/>
                <SizeBasedTriggeringPolicy size="${every_file_size}"/>
            </Policies>
            <DefaultRolloverStrategy max="${error_max}" />
            <Filters >
                <ThresholdFilter level="FATAL" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="ERROR" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
        </RollingFile>
        <!--druid的日誌記錄追加器-->
        <RollingFile name="druidSqlRollingFile" fileName="${basePath}/druid-sql.log"
                     filePattern="${basePath}/%d{yyyy-MM}/druid-sql-%d{yyyy-MM-dd}-%i.log.gz">
            <PatternLayout pattern="${log_pattern}"/>
            <Policies>
                <SizeBasedTriggeringPolicy size="100 MB"/>
                <TimeBasedTriggeringPolicy/>
            </Policies>
        </RollingFile>
    </appenders>

    <!--定義logger,只有定義了logger並引入的appender,appender才會生效-->
    <loggers>
        <!--設置打印sql語句配置開始,以下兩者配合使用,可以優化日誌的輸出信息,減少一些不必要信息的輸出-->
        <!--設置java.sql包下的日誌只打印DEBUG及以上級別的日誌,此設置可以支持sql語句的日誌打印-->
        <logger name="java.sql" level="DEBUG" additivity="false">
            <appender-ref ref="Console"/>
        </logger>
        <!--設置org.mybatis.spring包下的日誌只打印WARN及以上級別的日誌-->
        <logger name="org.mybatis.spring" level="WARN" additivity="false" >
            <appender-ref ref="Console"/>
        </logger>
        <!--設置org.mybatis.spring包下的日誌只打印WARN及以上級別的日誌-->
        <logger name="org.springframework" level="WARN" additivity="false">
            <appender-ref ref="Console"/>
        </logger>
        <!--設置org.mybatis.spring包下的日誌只打印WARN及以上級別的日誌-->
        <logger name="com.qfx.workflow.service" level="WARN" additivity="false">
            <appender-ref ref="Console"/>
        </logger>
        <!--設置打印sql語句配置結束-->
        <!--記錄druid-sql的記錄-->
        <logger name="druid.sql.Statement" level="debug" additivity="false">
            <appender-ref ref="druidSqlRollingFile"/>
        </logger>
        <logger name="druid.sql.Statement" level= "debug" additivity="false">
            <appender-ref ref="druidSqlRollingFile"/>
        </logger>

        <!--建立一個默認的root的logger-->
        <root level="${output_log_level}">
            <appender-ref ref="RollingFile"/>
            <appender-ref ref="Console"/>
            <appender-ref ref="InfoFile"/>
            <appender-ref ref="WarnFile"/>
            <appender-ref ref="ErrorFile"/>
        </root>
    </loggers>

</configuration>